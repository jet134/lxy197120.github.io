<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反射机制</title>
      <link href="/2021/10/30/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/10/30/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030025908336.png"></p><h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="一、什么是Java反射机制？"><a href="#一、什么是Java反射机制？" class="headerlink" title="一、什么是Java反射机制？"></a>一、什么是Java反射机制？</h2><p>​        Java的反射(reflection)机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键。</p><p>​        Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类;在运行时构造任意一个类的对象;在运行时判断任意一个类所具有的成员变量和方法;在运行时调用任意一个对象的方法;生成动态代理。</p><p>​        反射技术大量用于Java设计模式和框架技术，最常见的设计模式就是工厂模式和单例模式。</p><p>​        单例模式(Singleton)：这个模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。在很多操作中，比如建立目录 数据库连接都需要这样的单线程操作。这样做就是为了节省内存空间，保证我们所访问到的都是同一个对象。</p><p>​        工厂模式(Factory)：工厂模式利用Java反射机制和Java多态的特性可以让我们的程序更加具有灵活性。用工厂模式进行大型项目的开发，可以很好的进行项目并行开发。 </p><h2 id="二、类加载器"><a href="#二、类加载器" class="headerlink" title="二、类加载器"></a>二、类加载器</h2><ul><li><p>​        Java类加载器（Java Classloader）是Java运行时环境（Java Runtime Environment）的一部分， 负责动态加载Java类到Java虚拟机的内存空间中。 </p></li><li><p>​        java默认有三种类加载器，BootstrapClassLoader、ExtensionClassLoader、App ClassLoader。 </p></li><li><p>​        BootstrapClassLoader（引导启动类加载器）： </p></li></ul><p>​                嵌在JVM内核中的加载器，该加载器是用C++语言写的，主要负载加载JAVA_HOME/lib下的类库，引 导启动类加载器无法被应用程序直接使用。 </p><ul><li>​        ExtensionClassLoader（扩展类加载器）： </li></ul><p>​                ExtensionClassLoader是用JAVA编写，且它的父类加载器是Bootstrap。 </p><p>​                是由sun.misc.Launcher$ExtClassLoader实现的，主要加载JAVA_HOME/lib/ext目录中的类库。 </p><p>​                它的父加载器是BootstrapClassLoader </p><ul><li>​        App ClassLoader（应用类加载器）： </li></ul><p>​                App ClassLoader是应用程序类加载器，负责加载应用程序classpath目录下的所有jar和class文 件。它的父加载器为Ext ClassLoader</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030025508894.png"> </p><pre class="line-numbers language-none"><code class="language-none">类通常是按需加载，即第一次使用该类时才加载。由于有了类加载器，Java运行时系统不需要知道文件与 文件系统。学习类加载器时，掌握Java的委派概念很重要。 双亲委派模型：如果一个类加载器收到了一个类加载请求，它不会自己去尝试加载这个类，而是把这个请求 转交给父类加载器去完成。每一个层次的类加载器都是如此。因此所有的类加载请求都应该传递到最顶层的 启动类加载器中，只有到父类加载器反馈自己无法完成这个加载请求（在它的搜索范围没有找到这个类） 时，子类加载器才会尝试自己去加载。委派的好处就是避免有些类被重复加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-加载配置文件"><a href="#1-加载配置文件" class="headerlink" title="1.加载配置文件"></a>1.加载配置文件</h3><p>​        如何通过java反射机制加载配置文件呢？这里我们通过一个简单的小例子来说明!</p><ol><li>首先我们在项目下建立一个source文件目录，如何设置为资源根目录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030010218043.png"> </p><p>​    2.如何通过类.class获取类加载器进而加载配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"config.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030010257026.png"> </p><p>​    <strong>值得注意的是默认加载的是src路径下的文件，但是当项目存在resource root目录时，就变为了加载resource root下的文件了。</strong></p><h2 id="三、Class对象的相关操作"><a href="#三、Class对象的相关操作" class="headerlink" title="三、Class对象的相关操作"></a>三、Class对象的相关操作</h2><p>要想了解一个类,必须先要获取到该类的字节码文件对象.</p><p>在Java中，每一个字节码文件，被夹在到内存后，都存在一个对应的Class类型的对象</p><h3 id="1-得到Class的几种方式"><a href="#1-得到Class的几种方式" class="headerlink" title="1.得到Class的几种方式"></a>1.得到Class的几种方式</h3><p>如果在编写代码时,指导类的名称,且类已经存在,可以通过</p><p><strong>包名.类名.class得到一个类的类对象</strong></p><p>如果拥有类的对象,可以通过 <strong>Class对象.getClass()得到一个类的类对象</strong></p><p>如果在编写代码时,知道类的名称,可以通过</p><p><strong>Class.forName(包名+类名):得到一个类的类对象</strong></p><p>上述的三种方式,在调用时,如果类在内存中不存在,则会加载到内存!如果类已经在内存中存在,不会重复加载,而是重复利用!</p><p><strong>(一个class文件在内存中不会存在两个类对象)</strong></p><ul><li><p>了解</p><p>  基本数据类型的类对象:基本数据类型.clss 、包装类.type</p><p>  基本数据类型包装类对象:包装类.class</p></li></ul><h3 id="2-获取Constructor-构造器）"><a href="#2-获取Constructor-构造器）" class="headerlink" title="2.获取Constructor(构造器）"></a>2.获取Constructor(构造器）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用无参数构造方法创建对象</span><span class="token class-name">People</span> p <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用两个参数传入的构造方法(有参构造)</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取属性</span><span class="token class-name">People</span> p2 <span class="token operator">=</span> cs2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有权限的构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在类中是私有构造，只有这样才可以找得到私有的方法</span>cs3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到了私有的构造方法不代表可以访问，所以得设置权限</span><span class="token class-name">People</span> p3 <span class="token operator">=</span> cs3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>People类中三个构造方法</strong></p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030012012654.png" style="zoom: 67%;" /> <p><strong>输出结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030011713738.png"> </p><h3 id="3-获取Method-方法"><a href="#3-获取Method-方法" class="headerlink" title="3.获取Method(方法)"></a>3.获取Method(方法)</h3><ol><li>getMethod(StringmethodName,class..clss)</li></ol><p>根据参数列表的类型和方法名,得到一个方法(public修饰的)</p><ol start="2"><li>getMethods();</li></ol><p>得到一个类的所有方法(public修饰的)</p><ol start="3"><li>getDeclaredMethod(StringmethodName,class..clss)</li></ol><p>根据参数列表的类型和方法名,得到一个方法(除继承以外所有的:包含私有,共有,保护,默认)</p><ol start="4"><li>getDeclaredMethods();</li></ol><p>得到一个类的所有方法(除继承以外所有的:包含私有,共有,保护,默认)</p><p>如何执行Method方法呢？</p><p>​    得到的方法.invoke(Object o,Object…para):</p><p>参数1.要调用方法的对象</p><p>参数2.要传递的参数列表‘</p><p>​    setAccessible(boolean flag)</p><p>如果flag为true，则表示忽略访问权限检查!(可以访问任何权限的方法)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类的构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取对象</span><span class="token class-name">People</span> p <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类的方法</span><span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> setAge <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取各种权限方法</span>setAge<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置可以访问私有权限</span><span class="token comment">//参数1：哪个对象要执行setname方法;参数二：调用方法时传递的参数0-n(可变参数)</span>setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>setAge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030012827224.png"> </p><h3 id="4-获取Field-属性"><a href="#4-获取Field-属性" class="headerlink" title="4.获取Field(属性)"></a>4.获取Field(属性)</h3><ol><li>getDeclaredField(String filedName) </li></ol><p>根据属性的名称, 获取一个属性对象 (可以获取到私有的属性) </p><ol start="2"><li>getDeclaredFields() </li></ol><p>获取所有属性 (包括私有)</p><ol start="3"><li>getField(String filedName) </li></ol><p>根据属性的名称, 获取一个属性对象 (public属性) </p><ol start="4"><li>getFields() </li></ol><p>获取所有属性 (public)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> c1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造方法</span><span class="token class-name">Object</span> o <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象</span><span class="token class-name">Field</span> phoneNumber <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"phoneNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取私有属性对象</span>phoneNumber<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置操作权限</span>phoneNumber<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"18750112980"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给o这个对象里的phoneNumber属性赋值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030013733194.png"> </p><h2 id="四、关于反射和注解"><a href="#四、关于反射和注解" class="headerlink" title="四、关于反射和注解"></a>四、关于反射和注解</h2><h3 id="1-获取类，属性，方法的全部注解对象"><a href="#1-获取类，属性，方法的全部注解对象" class="headerlink" title="1.获取类，属性，方法的全部注解对象"></a>1.获取类，属性，方法的全部注解对象</h3><pre class="line-numbers language-none"><code class="language-none">Annotation[] annotations01 &#x3D; Class&#x2F;Field&#x2F;Method.getAnnotations(); for (Annotation annotation : annotations01) &#123;System.out.println(annotation); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-根据类型获取类-属性-方法的注解对象"><a href="#2-根据类型获取类-属性-方法的注解对象" class="headerlink" title="2.根据类型获取类,属性,方法的注解对象"></a>2.根据类型获取类,属性,方法的注解对象</h3><pre class="line-numbers language-none"><code class="language-none">注解类型 对象名 &#x3D; (注解类型) c.getAnnotation(注解类型.class);&#x2F;&#x2F;这个c是该注解所在的类的class对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-具体操作示例"><a href="#3-具体操作示例" class="headerlink" title="3.具体操作示例"></a>3.具体操作示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*表注解*/</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment">//允许使用在类上面</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">//持久化策略</span><span class="token annotation punctuation">@Documented</span><span class="token comment">//允许使用在文档里</span><span class="token annotation punctuation">@Inherited</span><span class="token comment">//允许继承</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TableAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用于标注类对应的表格名称</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*属性注解*/</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token comment">//可以是用在属性上面</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">//策略</span><span class="token annotation punctuation">@Documented</span><span class="token comment">//可以使用在文档里</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ColumnAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//描述列名</span>    <span class="token class-name">String</span> <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//描述类型</span>    <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//描述数据的长度</span>    <span class="token class-name">String</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030014654221.png"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflectandInterface.Book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TableAnnotation</span> ta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TableAnnotation</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表名:"</span> <span class="token operator">+</span> ta<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ColumnAnnotation</span> ca <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ColumnAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"属性，对于数据库的字段："</span> <span class="token operator">+</span>    ca<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，数据类型："</span> <span class="token operator">+</span> ca<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，数据长度："</span> <span class="token operator">+</span>    ca<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030014750369.png"> </p><h2 id="五、内省-现阶段了解"><a href="#五、内省-现阶段了解" class="headerlink" title="五、内省(现阶段了解)"></a>五、内省(现阶段了解)</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>基于反射 , java所提供的一套应用到JavaBean的API </p><p>一个定义在包中的类 , 拥有<strong>无参构造器</strong> 所有<strong>属性私有</strong>, 所有属性提供<strong>get/set方法</strong> 实现了<strong>序列化接口</strong> 这种类, 我们称其为 bean类 . </p><p>Java提供了一套java.beans包的api , 对于反射的操作, 进行了封装 ! </p><h3 id="2-Introspector"><a href="#2-Introspector" class="headerlink" title="2.Introspector"></a>2.Introspector</h3><pre class="line-numbers language-none"><code class="language-none">获取Bean类信息 方法:BeanInfo getBeanInfo(Class cls) 通过传入的类信息, 得到这个Bean类的封装对象 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-BeanInfo"><a href="#3-BeanInfo" class="headerlink" title="3.BeanInfo"></a>3.BeanInfo</h3><pre class="line-numbers language-none"><code class="language-none">常用的方法: MethodDescriptor[] getPropertyDescriptors(): 获取bean类的 get&#x2F;set方法 数组，即这个数组里存放的一个对象同时包含着get set方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-MethodDescriptor"><a href="#4-MethodDescriptor" class="headerlink" title="4.MethodDescriptor"></a>4.MethodDescriptor</h3><pre class="line-numbers language-none"><code class="language-none">常用方法: 1. Method getReadMethod(); 获取一个get方法 2. Method getWriteMethod(); 获取一个set方法 有可能返回null 注意 ,加判断 !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-实例操作"><a href="#5-实例操作" class="headerlink" title="5.实例操作"></a>5.实例操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Express</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">BeanInfo</span> bi <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取bean的信息</span><span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有get set 方法</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Method</span> get <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Method</span> set <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211030015632212.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML和JSON知识点</title>
      <link href="/2021/10/20/XML%E5%92%8CJSON%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2021/10/20/XML%E5%92%8CJSON%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020234358063.png"></p><h1 id="XML与JSON"><a href="#XML与JSON" class="headerlink" title="XML与JSON"></a>XML与JSON</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>业务目标： </p><p>学习数据格式，便于后续更好的进行开发 </p><p>技能目标： </p><p>掌握 XML/JSON 语法（绝对重点） </p><p>掌握 XML 解析（熟悉即可） </p><p>掌握 JSON 解析（绝对重点）</p><h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>可扩展标记语言（eXtensible Markup Language）。 </p><p>特性:</p><ol><li><p>xml具有平台无关性, 是一门独立的标记语言. </p></li><li><p>xml具有自我描述性</p></li></ol><h3 id="2-为什么要学习XML捏？"><a href="#2-为什么要学习XML捏？" class="headerlink" title="2.为什么要学习XML捏？"></a>2.为什么要学习XML捏？</h3><ol><li><p>网络数据传输. </p></li><li><p>数据存储 </p></li><li><p>配置文件</p></li></ol><p>XML文件是保存XML数据的一种方式 </p><p>XML数据也可以以其他的方式存在（如在内存中构建XML数据）。 </p><p>不要将XML语言狭隘的理解成XML文件！</p><h3 id="3-XML的格式"><a href="#3-XML的格式" class="headerlink" title="3.XML的格式"></a>3.XML的格式</h3><p><strong>1.XML文档声明：</strong></p><?xml version="1.0" encoding="UTF-8"?><p><strong>2.样例：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persons</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10001<span class="token punctuation">"</span></span> <span class="token attr-name">groupid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10002<span class="token punctuation">"</span></span> <span class="token attr-name">groupid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persons</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--在内存里可以看成是一个文档树--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.注释：</strong></p><p>1.注释不能写在文档文档声明前 2.注释不能嵌套注释 </p><p>格式:</p><p>注释开始: &lt;!– </p><p>注释结束: –&gt; </p><h3 id="4-XML解析"><a href="#4-XML解析" class="headerlink" title="4.XML解析"></a>4.XML解析</h3><ul><li><strong>接下来的操作需要导入jar包</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232951725.png"> </p><h4 id="DOM4J解析XML-掌握"><a href="#DOM4J解析XML-掌握" class="headerlink" title="DOM4J解析XML(掌握)"></a>DOM4J解析XML(掌握)</h4><h5 id="1-主要步骤"><a href="#1-主要步骤" class="headerlink" title="1.主要步骤"></a>1.主要步骤</h5><pre class="line-numbers language-none"><code class="language-none">1. 引入jar文件 dom4j.jar 2. 创建一个指向XML文件的输入流 FileInputStream fis &#x3D; new FileInputStream(&quot;xml文件的地址&quot;); 3. 创建一个XML读取工具对象 SAXReader sr &#x3D; new SAXReader(); 4. 使用读取工具对象, 读取XML文档的输入流 , 并得到文档对象--&gt; 指的是加载到内存的 整个XML文档.Document doc &#x3D; sr.read(fis); 5. 通过文档对象, 获取XML文档中的根元素对象 Element root &#x3D; doc.getRootElement();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解析本地文件"><a href="#2-解析本地文件" class="headerlink" title="2.解析本地文件"></a>2.解析本地文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.获取输入流</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E://developer//kaikeba//课件与笔记xml//课件与笔记//工具//Demo1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.读取并且得到文档对象(相当于把流指向的文件加载到了内存变成树状结构)</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.通过文档获取根元素</span><span class="token class-name">Element</span> root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.解析元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Element book = root.element("book");Element name = book.element("name");Element info = book.element("info");System.out.println(name.getText());System.out.println(info.getText());*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> es <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> es<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> book <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020225940605.png" style="zoom:67%;" /> <h5 id="3-解析网络文件"><a href="#3-解析网络文件" class="headerlink" title="3.解析网络文件"></a>3.解析网络文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">"13860690901"</span><span class="token punctuation">;</span><span class="token comment">//1.获取XML资源的输入流</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://apis.juhe.cn/mobile/get?%20phone="</span><span class="token operator">+</span>phone<span class="token operator">+</span><span class="token string">"&amp;dtype=xml&amp;key=9f3923e8f87f1ea50ed4ec8c39cc9253"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URLConnection</span> conn <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开连接</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接获取流对象</span><span class="token comment">//2.创建一个XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过读取对象，读取XML数据，返回文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.获取根节点</span><span class="token class-name">Element</span> root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.解析内容</span><span class="token class-name">String</span> code <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"resultcode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> result <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> province <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> city <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>province<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机号码归属地为："</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机号码归属地为："</span> <span class="token operator">+</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"areacode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"zip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的手机号码！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232233837.png"> </p><h4 id="DOM4J-XPATH解析XML"><a href="#DOM4J-XPATH解析XML" class="headerlink" title="DOM4J - XPATH解析XML"></a>DOM4J - XPATH解析XML</h4><h5 id="1-路径表达式"><a href="#1-路径表达式" class="headerlink" title="1.路径表达式"></a>1.路径表达式</h5><pre class="line-numbers language-none"><code class="language-none">通过路径快速的查找一个或一组元素 路径表达式: 1. &#x2F; : 从根节点开始查找 2. &#x2F;&#x2F; : 从发起查找的节点位置 查找后代节点 3. . : 查找当前节点 4. .. : 查找父节点 5. @ : 选择属性 属性使用方式: [@属性名&#x3D;&#39;值&#39;] [@属性名&gt;&#39;值&#39;] [@属性名&lt;&#39;值&#39;] [@属性名!&#x3D;&#39;值&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解析本地文件-1"><a href="#2-解析本地文件-1" class="headerlink" title="2.解析本地文件"></a>2.解析本地文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token comment">//1.获取输入流</span>      <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E://developer//kaikeba//课件与笔记xml//课件与笔记//工具//Demo1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2.创建XML读取对象</span>      <span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3.读取并且得到文档对象(相当于把流指向的文件加载到了内存变成树状结构)</span>      <span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4.通过文档对象+xpath,查找所有的name节点</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectNodes</span><span class="token punctuation">(</span><span class="token string">"//book//name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.查找单个节点</span>      <span class="token class-name">Node</span> node <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//book[@id = '1002']//name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020231057859.png"> </p><h5 id="3-解析网络文件-1"><a href="#3-解析网络文件-1" class="headerlink" title="3.解析网络文件"></a>3.解析网络文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">"13860690901"</span><span class="token punctuation">;</span><span class="token comment">//1.获取XML资源的输入流</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://apis.juhe.cn/mobile/get?%20phone="</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">"&amp;dtype=xml&amp;key=9f3923e8f87f1ea50ed4ec8c39cc9253"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URLConnection</span> conn <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建一个XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过读取对象，读取XML数据，返回文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Node</span> node <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//company"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择单一节点不加属性过滤默认找第一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020231316434.png"> </p><h3 id="5-Java生成XML-熟悉"><a href="#5-Java生成XML-熟悉" class="headerlink" title="5.Java生成XML(熟悉)"></a>5.Java生成XML(熟悉)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.通过文档帮助器，创建一个空的文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.给文档添加一个根节点</span><span class="token class-name">Element</span> books <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过根节点丰富子节点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span>   <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> book <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Element</span> name <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"java程序设计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Element</span> info <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"非常好的一本书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加属性</span><span class="token punctuation">&#125;</span><span class="token comment">//4.创建一个文件的输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://大三上//books.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.将输出流转换成xml输出流</span><span class="token class-name">XMLWriter</span> xw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.写出文档</span>xw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7.释放资源</span>xw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232121985.png"> </p><h3 id="6-XStream的使用-了解"><a href="#6-XStream的使用-了解" class="headerlink" title="6.XStream的使用(了解)"></a>6.XStream的使用(了解)</h3><ul><li>快速的将Java中的对象, 转换为 XML字符串. </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林小婷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//XStream</span><span class="token comment">//1.创建一个XStream对象</span><span class="token class-name">XStream</span> xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.修改某个类型生成的根节点（可选的，默认包名.类名）</span>xs<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.传入对象，开始生成</span><span class="token class-name">String</span> s <span class="token operator">=</span> xs<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个person类需要自己建static Person&#123;...&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232822207.png"> </p><h3 id="7-xml的解析时遇到的问题"><a href="#7-xml的解析时遇到的问题" class="headerlink" title="7.xml的解析时遇到的问题"></a>7.xml的解析时遇到的问题</h3><p>遇到的问题：</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211019163455678.png" style="zoom: 67%;" /> <p>解决方法二：文件另存修改编码集，还能处理节点.getText()显示到内存时的乱码问题！</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211019164654629.png" style="zoom:67%;" /> <h3 id="8-面试题"><a href="#8-面试题" class="headerlink" title="8.面试题"></a>8.面试题</h3><pre class="line-numbers language-none"><code class="language-none">问: Java中有几种XML解析方式 ? 分别是什么 ? 有什么样的优缺点 ? 答: 四种. 1. SAX解析解析方式是事件驱动机制 ! SAX解析器, 逐行读取XML文件解析 , 每当解析到一个标签的开始&#x2F;结束&#x2F;内容&#x2F;属性时,触 发事件. 我们可以编写程序在这些事件发生时, 进行相应的处理. 优点:分析能够立即开始，而不是等待所有的数据被处理    逐行加载,节省内存.有助于解析大于系统内存的文档    有时不必解析整个文档,它可以在某个条件得到满足时停止解析. 缺点:1. 单向解析，无法定位文档层次，无法同时访问同一文档的不同部分数据(因为逐 行解析, 当解析第n行是, 第n-1行已经被释放了, 无法在进行操作了). 2. 无法得知事件发生时元素的层次, 只能自己维护节点的父&#x2F;子关系. 3. 只读解析方式, 无法修改XML文档的内容. 2. DOM解析是用与平台和语言无关的方式表示XML文档的官方W3C标准，分析该结构通常需要加载整个 文档和内存中建立文档树模型.程序员可以通过操作文档树, 来完成数据的获取 修改 删除等. 优点:文档在内存中加载, 允许对数据和结构做出更改. 访问是双向的，可以在任何时候在树中双向解析数据。 缺点:文档全部加载在内存中 , 消耗资源大.（其实也不大可以忽略不计） 3. JDOM解析目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一 个Java特定模型，JDOM一直得到大力推广和促进。 JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java&#x2F;XML问题” （根据学习曲线假定为20%） 优点:使用具体类而不是接口，简化了DOM的API。大量使用了Java集合类，方便了Java开发人员。 缺点:没有较好的灵活性。 性能不是那么优异。DOM4J解析XML 掌握4. DOM4J解析 它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath 支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项， DOM4J是一个非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一 个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML。 目前许多开源项目中大量采用DOM4J , 例如:Hibernate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、JSON"><a href="#二、JSON" class="headerlink" title="二、JSON"></a>二、JSON</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li>JSON: JavaScript Object Notation JS对象简谱 , 是一种轻量级的数据交换格式. </li></ul><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h3><h4 id="对象格式"><a href="#对象格式" class="headerlink" title="对象格式"></a>对象格式</h4><pre class="line-numbers language-none"><code class="language-none">一本书书名简介 java:    class Book&#123;    private String name;     private String info;    get&#x2F;set...     &#125;    Book b &#x3D; new Book();     b.setName(“金苹果”);     b.setInfo(“种苹果”); ...js:     var b &#x3D; new Object();     b.name &#x3D; &quot;金苹果&quot;;     b.info &#x3D; &quot;种苹果&quot;; XML:    &lt;book&gt;    &lt;name&gt;金苹果&lt;&#x2F;name&gt;     &lt;info&gt;种苹果&lt;&#x2F;info&gt;     &lt;&#x2F;book&gt; JSON:    &#123;     &quot;name&quot;:&quot;金苹果&quot;,     &quot;info&quot;:&quot;种苹果&quot;     json一个对象, 由一个大括号表示.     括号中 描述对象的属性 . 通过键值对来描述对象的属性     (可以理解为, 大括号中, 包含的是一个个的键值对.)     格式:    键与值之间使用冒号连接, 多个键值对之间使用逗号分隔.     键值对的键 应使用引号引住 (通常Java解析时, 键不使用引号会报错. 而JS能正确解析.)    键值对的值, 可以是JS中的任意类型的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组格式"><a href="#数组格式" class="headerlink" title="数组格式"></a>数组格式</h4><pre class="line-numbers language-none"><code class="language-none">在JSON格式中可以与对象互相嵌套 [元素1,元素2...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>     <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"伟杰老师"</span><span class="token punctuation">,</span>     <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token property">"pengyou"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王二"</span><span class="token punctuation">,</span><span class="token string">"麻子"</span><span class="token punctuation">,</span>               <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"野马老师"</span><span class="token punctuation">,</span>                 <span class="token property">"info"</span><span class="token operator">:</span><span class="token string">"像匹野马一样狂奔在技术钻研的道路上"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"heihei"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"大长刀"</span><span class="token punctuation">,</span> <span class="token property">"length"</span><span class="token operator">:</span><span class="token string">"40m"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Java和JSON的联系"><a href="#3-Java和JSON的联系" class="headerlink" title="3.Java和JSON的联系"></a>3.Java和JSON的联系</h3><p><strong>要做什么?</strong></p><ul><li>将Java中的对象 快速的转换为 JSON格式的字符串. </li><li>将JSON格式的字符串, 转换为Java的对象.</li></ul><h3 id="4-Gson"><a href="#4-Gson" class="headerlink" title="4.Gson"></a>4.Gson</h3><h4 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h4><p>首先到<a href="https://search.maven.org/artifact/com.google.code.gson/gson/2.8.8/jar%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84gson%E7%9A%84jar%E5%8C%85%E3%80%82">https://search.maven.org/artifact/com.google.code.gson/gson/2.8.8/jar下载对应的gson的jar包。</a></p><p>选择第一个jar，然后导入工程才能使用</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021004251712.png"> </p><h4 id="对象转换为JSON字符串"><a href="#对象转换为JSON字符串" class="headerlink" title="对象转换为JSON字符串"></a>对象转换为JSON字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Gson对象</span><span class="token class-name">Gson</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.对象转json</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span><span class="token string">"金苹果"</span><span class="token punctuation">,</span><span class="token string">"种植苹果真辛苦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON字符串转换为对象"><a href="#JSON字符串转换为对象" class="headerlink" title="JSON字符串转换为对象"></a>JSON字符串转换为对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//3.通过Gson对象将json字符串转成对象</span><span class="token class-name">Book</span> book1 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":\"100\",\"name\":\"金苹果\",\"info\":\"种植苹果真辛苦\"&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.也可以通过Gson对象将json字符串转换成集合</span><span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":\"100\",\"name\":\"金苹果\",\"info\":\"种植苹果真辛苦\"&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005043330.png"></h5><h3 id="5-FastJson"><a href="#5-FastJson" class="headerlink" title="5.FastJson"></a>5.FastJson</h3><h4 id="下载jar包-1"><a href="#下载jar包-1" class="headerlink" title="下载jar包"></a>下载jar包</h4><p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p>选择：the lastest jar</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005441971.png">  </p><h4 id="对象转换为JSON字符串-1"><a href="#对象转换为JSON字符串-1" class="headerlink" title="对象转换为JSON字符串"></a>对象转换为JSON字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span><span class="token string">"唐诗三百首"</span><span class="token punctuation">,</span><span class="token string">"床前明月光，地上鞋两双"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.对象转换json字符串</span><span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接调用 JSON静态方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON字符串转换为对象-1"><a href="#JSON字符串转换为对象-1" class="headerlink" title="JSON字符串转换为对象"></a>JSON字符串转换为对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//2.json字符串转换成对象</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"&#123;\"id\":\"1001\",\"info\":\"床前明月光，地上鞋两双\",\"name\":\"唐诗三百首\"&#125;"</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.转换数组["一二三",四五六","七八九"]</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"[\"一二三\",\"四五六\",\"七八九\"]"</span><span class="token punctuation">;</span>     <span class="token comment">// '\'是转义符</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005609329.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015230118962.png"></p><h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><h2 id="一、-多线程技术概述"><a href="#一、-多线程技术概述" class="headerlink" title="一、    多线程技术概述"></a>一、    多线程技术概述</h2><h3 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h3><p>进程<br>    - 是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间</p><p>线程</p><ul><li>是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发执行. 一个进程最少<br> 有一个线程</li><li>线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干执行路径又可以划分<br> 成若干个线程</li><li></li></ul><h3 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2.线程调度"></a>2.线程调度</h3><p>分时调度</p><ul><li>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</li></ul><p>抢占式调度</p><ul><li>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，<br>Java使用的为抢占式调度。</li><li>CPU使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核新而言，某个时刻，<br>只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是 在同一时<br>刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的 使<br>用率更高。</li></ul><h3 id="3-同步与异步"><a href="#3-同步与异步" class="headerlink" title="3.同步与异步"></a>3.同步与异步</h3><p><strong>同步</strong>:排队执行 , 效率低但是安全.（在一条道路上一起执行）</p><p><strong>异步</strong>:同时执行 , 效率高但是数据不安全.（在多条道路上同时执行）</p><h3 id="4-并发与并行"><a href="#4-并发与并行" class="headerlink" title="4.并发与并行"></a>4.并发与并行</h3><p><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</p><p>​    多个CPU同时执行多个任务。比如：多个人同时做不同的事情</p><p><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。</p><p>​    一个CPU（采用时间片）同时执行多个任务。不如：秒杀、多个人做同一件事情    </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015232327814.png"> </p><h2 id="二、线程的常用方法"><a href="#二、线程的常用方法" class="headerlink" title="二、线程的常用方法"></a>二、线程的常用方法</h2><h3 id="1-Thread中常用方法"><a href="#1-Thread中常用方法" class="headerlink" title="1.Thread中常用方法"></a>1.Thread中常用方法</h3><ul><li>可以看jdk11API,这里只是列出几个常用</li></ul><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>1.start()</td><td>启动当前线程；调用当前线程的run()方法</td></tr><tr><td>2.run()</td><td>通常重写继承Thread类中的此方法，将创建多线程要执行的操作声明在此方法中</td></tr><tr><td>3.currentThread()</td><td>静态方法，返回执行当前代码的线程</td></tr><tr><td>4.getName()</td><td>获取当前线程的名字</td></tr><tr><td>5.setName()</td><td>设置当前线程的名字</td></tr><tr><td>6.yield()</td><td>释放当前cpu的执行权</td></tr><tr><td>7.join()</td><td>线程a中调用线程b的join()，此时线程a就会进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</td></tr><tr><td>8.sleep(long millis)</td><td>让当前线程“休眠”指定millis毫秒。在改时间段内，当前线程处于阻塞状态</td></tr><tr><td>9.isAlive()</td><td>判断当前线程是否存活</td></tr></tbody></table><h3 id="2-线程的优先级"><a href="#2-线程的优先级" class="headerlink" title="2.线程的优先级"></a>2.线程的优先级</h3><h4 id="①-描述"><a href="#①-描述" class="headerlink" title="①.描述"></a>①.描述</h4><table><thead><tr><th>变量和类型</th><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><code>static int</code></td><td><code>MAX_PRIORITY</code></td><td>线程可以拥有的最大优先级。 <strong>10</strong></td></tr><tr><td><code>static int</code></td><td><code>MIN_PRIORITY</code></td><td>线程可以拥有的最低优先级。 <strong>1</strong></td></tr><tr><td><code>static int</code></td><td><code>NORM_PRIORITY</code></td><td>分配给线程的默认优先级。 <strong>5是默认优先级</strong></td></tr></tbody></table><h4 id="②-如何获取和设置当前线程的优先级"><a href="#②-如何获取和设置当前线程的优先级" class="headerlink" title="②.如何获取和设置当前线程的优先级"></a>②.如何获取和设置当前线程的优先级</h4><ul><li>int getPriority()    ：获取当前线程的优先级</li><li>void setPriority(int newPriority)    ：设置线程的优先级</li></ul><p><strong>说明：</strong>高优先级的线程要抢占低优先级线程的CPU执行权。但是只是从概率上来讲，高优先级的线程高概率下被执行。并不意味着只有高优先级的线程被执行完以后，低优先级的线程才执行！！！</p><h2 id="三、创建线程的方式以及区别"><a href="#三、创建线程的方式以及区别" class="headerlink" title="三、创建线程的方式以及区别"></a>三、创建线程的方式以及区别</h2><h3 id="1-方式一：继承Thread类"><a href="#1-方式一：继承Thread类" class="headerlink" title="1.方式一：继承Thread类"></a>1.方式一：继承Thread类</h3><ul><li>步骤</li></ul><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run()方法 –&gt;将此线程执行的操作声明在run()中</li><li>创建Thread类的子类对象</li><li>通过此对象调用start()方法</li></ol><h3 id="2-方式二：实现Runnable接口"><a href="#2-方式二：实现Runnable接口" class="headerlink" title="2.方式二：实现Runnable接口"></a>2.方式二：实现Runnable接口</h3><ul><li>步骤</li></ul><ol><li>创建一个实现Runnable接口的类</li><li>实现类中去实现Runnable接口中的抽象方法：run()</li><li>创建实现类对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><h3 id="3-比较创建线程的两种方式"><a href="#3-比较创建线程的两种方式" class="headerlink" title="3.比较创建线程的两种方式"></a>3.比较创建线程的两种方式</h3><ul><li><p>开发中：优先选择：实现Runnable接口的方式</p></li><li><p>原因：</p></li></ul><p>1.实现的方式没有类单继承的局限性</p><p>2.实现的方式更适合来处理多个线程共享数据的情况<em><strong>（可以把实现Runnable接口的实现类看做一个任务，多个线程共同执行一项任务）</strong></em></p><ul><li>相同点：</li></ul><p>两种方式都要重写run()方法，将线程要执行的逻辑声明在run()中</p><h2 id="四、线程的生命周期"><a href="#四、线程的生命周期" class="headerlink" title="四、线程的生命周期"></a>四、线程的生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015175559120.png"></p><h2 id="五、线程同步"><a href="#五、线程同步" class="headerlink" title="五、线程同步"></a>五、线程同步</h2><ul><li>关键字：<strong>synchronized</strong>：任何对象都能作为锁放在synchronized(){}的括号里，通常this表示当前类实现对象充当锁</li></ul><p> <strong>1.同步代码块：</strong></p><p>synchronized(this){</p><p>​    //要执行的操作</p><p>}</p><p><strong>2.同步方法：</strong></p><p>哪个类调用这个同步方法，就用这个类的this充当锁</p><p>public synchronized boolean sale(){</p><p>​    //要执行的操作</p><p>}</p><p>(注意同步方法声明为静态时，使用调用该方法的<strong>类名.class</strong>当做锁)</p><p><strong>3.ReentrantLock（显示锁）</strong></p><p>两个构造方法：</p><table><thead><tr><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td><code>ReentrantLock()</code></td><td>创建一个 <code>ReentrantLock</code>的实例。</td></tr><tr><td><code>ReentrantLock(boolean fair)</code></td><td>使用给定的<strong>公平</strong>策略创建 <code>ReentrantLock</code>的实例。</td></tr></tbody></table><p>常用方法：lock() //获得锁   ;  unlock() //尝试释放此锁定</p><h2 id="六、线程通信"><a href="#六、线程通信" class="headerlink" title="六、线程通信"></a>六、线程通信</h2><h3 id="1-线程通信的例子："><a href="#1-线程通信的例子：" class="headerlink" title="1.线程通信的例子："></a>1.线程通信的例子：</h3><ul><li>使用两个线程打印100到1，线程一，线程二交替打印</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NumberThread</span> numberThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一次没有含义，没有线程可以释放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让线程阻塞</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-涉及到的三个方法："><a href="#2-涉及到的三个方法：" class="headerlink" title="2.涉及到的三个方法："></a>2.涉及到的三个方法：</h3><p>1.wait():一旦执行此方法，当前线程进入阻塞状态，并释放同步监视器。</p><p>2.notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就会唤醒优先级最高的线程</p><p>3.notifyAll():一旦执行此方法，就会唤醒所有被wait的线程</p><p>​    <strong>说明：</strong></p><ul><li>1.上述三个方法必须用在同步代码块或同步方法中；</li><li>2.上述三个方法调用者必须是同步代码块或同步方法中的同步监视器；</li><li>3.上述三个方法的定义是在java.lang.Object类中；</li></ul><h3 id="3-面试题：sleep-和wait-的异同？"><a href="#3-面试题：sleep-和wait-的异同？" class="headerlink" title="3.面试题：sleep()和wait()的异同？"></a>3.面试题：sleep()和wait()的异同？</h3><p>1.相同点：一旦执行此方法，都可以使当前线程进入阻塞状态</p><p>2.不同点：</p><ul><li>两个方法声明的位置不同：Thread类中声明sleep()；Object类中声明wait()；</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用；wait()必须使用在同步代码块或同步方法中；</li><li>关于是否释放同步监视器：如果两个方法都是用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</li></ul><h2 id="七、新线程的创建方式"><a href="#七、新线程的创建方式" class="headerlink" title="七、新线程的创建方式"></a>七、新线程的创建方式</h2><h3 id="1-实现Calllable接口创建线程"><a href="#1-实现Calllable接口创建线程" class="headerlink" title="1.实现Calllable接口创建线程"></a>1.实现Calllable接口创建线程</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015222117014.png"></p><h3 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2.线程池"></a>2.线程池</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015222903251.png"></p><p><strong>四种线程池：</strong><a href="https://www.cnblogs.com/laojiao/p/9559002.html">https://www.cnblogs.com/laojiao/p/9559002.html</a></p><p><strong>1.</strong> <strong>缓存线程池</strong></p><p><strong>2.</strong> <strong>定长线程池</strong></p><p><strong>3.</strong> <strong>单线程线程池</strong></p><p><strong>4.</strong> <strong>周期性任务定长线程池</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Thread </tag>
            
            <tag> Runnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO总结归纳</title>
      <link href="/2021/10/13/JavaIO%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
      <url>/2021/10/13/JavaIO%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211013003945218.png"></p><h1 id="JavaIO"><a href="#JavaIO" class="headerlink" title="JavaIO"></a>JavaIO</h1><h2 id="一、IO流的概述"><a href="#一、IO流的概述" class="headerlink" title="一、IO流的概述"></a>一、IO流的概述</h2><h3 id="1-了解什么是IO流"><a href="#1-了解什么是IO流" class="headerlink" title="1.了解什么是IO流"></a>1.了解什么是IO流</h3><ol><li>可以将这种数据传输操作看做是一种数据的流动，按照数据流动的方向分为输入Input和输出Output(相对的来看)。</li><li>Java中的IO操作主要指的是 java.io包下的一些常用类的使用，通过这些常用类对数据进行读取（输入Input）和写出（Output）</li></ol><h3 id="2-IO流的分类"><a href="#2-IO流的分类" class="headerlink" title="2.IO流的分类:"></a>2.IO流的分类:</h3><ol><li><p>按照流的方向分为：输入流和输出流</p></li><li><p>按照流的数据类型分为：字节流和字符流</p><p> 字节流：<strong>以字节为单位操作</strong></p><p> ​        输入流：InputStream</p><p> ​        输出流：OutStream</p><p> 字符流：<strong>以字符为单位操作</strong></p><p> ​        输入流：Reader</p><p> ​        输出流：Writer</p></li></ol><h2 id="二、FileOutputStream-从内存写出到文件"><a href="#二、FileOutputStream-从内存写出到文件" class="headerlink" title="二、FileOutputStream(从内存写出到文件)"></a>二、FileOutputStream(从内存写出到文件)</h2><h3 id="1-常用方法："><a href="#1-常用方法：" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><table><thead><tr><th align="left"><code>void</code></th><th><code>close()</code></th><th>关闭此文件输出流并释放与此流关联的所有系统资源。</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td><code>write(byte[] b)</code></td><td>将指定字节数组中的 <code>b.length</code>字节写入此文件输出流。</td></tr><tr><td align="left"><code>void</code></td><td><code>write(byte[] b, int off,  int len)</code></td><td>将从偏移量 <code>off</code>开始的指定字节数组中的 <code>len</code>字节写入此文件输出流。</td></tr><tr><td align="left"><code>void</code></td><td><code>write(int b)</code></td><td>将指定的字节写入此文件输出流。</td></tr></tbody></table><h3 id="2-使用："><a href="#2-使用：" class="headerlink" title="2.使用："></a>2.使用：</h3><p>1.write(int b)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会自动生成文件</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入的是(转换后的)字节，int类型8个低位，也就是一个字节，换算整型是0-255</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功写出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认一个对象fos从内存写出到文件，修改write内的内容默认是会覆盖文件</span><span class="token comment">//FileOutputStream fos = new FileOutputStream("G://a.txt",true); 此true表示在文件后追加内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.write(byte[] b) 和 write(byte[] b, int off,  int len)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//fos.write(b);//a.txt文件会显示ABCDEF</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示CD</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功写出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、FileInputstream-从文件读入到内存"><a href="#三、FileInputstream-从文件读入到内存" class="headerlink" title="三、FileInputstream(从文件读入到内存)"></a>三、FileInputstream(从文件读入到内存)</h2><h3 id="1-常用方法：-1"><a href="#1-常用方法：-1" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><ul><li><strong>返回值为int是将8位二进制数转换成的</strong></li><li><strong>int返回值为-1的时候表示读到文件末尾，没东西读入了，因此返回-1</strong></li></ul><table><thead><tr><th><code>int</code></th><th><code>read()</code></th><th>从此输入流中读取一个字节的数据。</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>read(byte[] b)</code></td><td>从此输入流 <code>b.length</code>最多 <code>b.length</code>字节的数据读  <code>b.length</code>字节数组。</td></tr><tr><td><code>int</code></td><td><code>read(byte[] b, int off,  int len)</code></td><td>从此输入流 <code>len</code>最多 <code>len</code>字节的数据读入一个字节数组。</td></tr></tbody></table><h3 id="2-使用：-1"><a href="#2-使用：-1" class="headerlink" title="2.使用："></a>2.使用：</h3><p>1.read()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读一个，返回的是67--> 'C' </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制台会连续读出C和D两个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.read(byte[] b)</p><p>首先将a.txt改为26英文字符</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012190331409.png"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示一个读10个字符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*末尾四个字符qrst表示字节数组末尾没被替换一起被输出了，是错误的abcdefghijklmnopqrstuvwxyzqrst*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确写法</strong>：不会导致qrst被读入，调用String指定位置读入指定长度</p><p><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20211012191141218.png"> </p><h2 id="四、FileWriter-字符写出"><a href="#四、FileWriter-字符写出" class="headerlink" title="四、FileWriter(字符写出)"></a>四、FileWriter(字符写出)</h2><ul><li><strong>会识别中文等各个字符一整个进行输出，不会导致读取一半导致乱码</strong></li></ul><h3 id="1-采用上面方法进行编码，控制台输出"><a href="#1-采用上面方法进行编码，控制台输出" class="headerlink" title="1.采用上面方法进行编码，控制台输出"></a>1.采用上面方法进行编码，控制台输出</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012223121614.png">     </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012223534510.png">    </p><p><strong>原因：正常一个中文字符占2个字节，但是采用utf-8动态编码集，因此一个中文字符不一定是两个字节。</strong></p><p>‘<strong>？</strong>’<strong>表示只读了一半的字，因此需要字符流来解决读取一半字的问题，但是编码集还得手动控制</strong></p><h3 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h3><table><thead><tr><th><code>void</code></th><th><code>flush()</code></th><th>刷新流。</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>write(char[] cbuf, int off,  int len)</code></td><td>写一个字符数组的一部分。</td></tr><tr><td><code>void</code></td><td><code>write(int c)</code></td><td>写一个字符。</td></tr><tr><td><code>void</code></td><td><code>write(String str, int off,  int len)</code></td><td>写一个字符串的一部分。</td></tr></tbody></table><h3 id="3-使用："><a href="#3-使用：" class="headerlink" title="3.使用："></a>3.使用：</h3><p>1.write(int c):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为字符a的范围比整形小，所以会自动转换成整数传进去！</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.write(String str):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好中国！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-flush-刷新管道"><a href="#4-flush-刷新管道" class="headerlink" title="4.flush()刷新管道"></a>4.flush()刷新管道</h3><ul><li>​    <strong>默认流关闭会自动调用flush()，但是在流没有关闭的情况下，字符从内存输出到磁盘时若不手动调用flush()可能会导致磁盘文件没有内容显示，字符可能还在缓冲当中</strong></li></ul><h2 id="五、FileReader-字符读入"><a href="#五、FileReader-字符读入" class="headerlink" title="五、FileReader(字符读入)"></a>五、FileReader(字符读入)</h2><h3 id="1-常用方法：-2"><a href="#1-常用方法：-2" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012230433888.png"> </p><h3 id="2-使用：-2"><a href="#2-使用：-2" class="headerlink" title="2.使用："></a>2.使用：</h3><p><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20211012230728868.png"> 此时a.txt内容</p><p>1.read():</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> read <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将整型转换成字符--->'锄'</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.利用循环和read()读完所有内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.利用char[]指定大小数组和read(char[] c)以及String构造函数new String(char,0,len)d读完所有内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G:/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入时用于存储字符的容器</span><span class="token keyword">int</span> len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的char数组中实际存储字符的个数</span><span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span class="token comment">//23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、转换流"><a href="#六、转换流" class="headerlink" title="六、转换流"></a>六、转换流</h2><ul><li>​    <strong>特点：字节流装饰为字符流：使用装饰者设计模式</strong></li></ul><h3 id="1-字节读入—-gt-字符读入："><a href="#1-字节读入—-gt-字符读入：" class="headerlink" title="1.字节读入—&gt;字符读入："></a>1.字节读入—&gt;字符读入：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//假设用到了网络爬虫，绝大部分几乎都是字节流，要获取中文等字符必须转换为字符流。</span><span class="token comment">//参数1：要转换的字节流</span><span class="token comment">//参数2：指定编码名称</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字节写出—-gt-字符写出："><a href="#2-字节写出—-gt-字符写出：" class="headerlink" title="2.字节写出—&gt;字符写出："></a>2.字节写出—&gt;字符写出：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//假设下面这一行获取的字节输出流是获取到的一个要给客户端发送数据的流，这里new是为了演示代码</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"床前明月光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尤其是在调用字符流写出时不要忘记加flush()刷新缓存</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012234708059.png"> </p><h2 id="七、打印流和缓存读取流"><a href="#七、打印流和缓存读取流" class="headerlink" title="七、打印流和缓存读取流"></a>七、打印流和缓存读取流</h2><h3 id="1-打印流"><a href="#1-打印流" class="headerlink" title="1.打印流"></a>1.打印流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字符输出(打印流)</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字节的打印流，所以不要flush()，在c.txt中也有内容</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在c.txt文件里有如下内容</span><span class="token comment">//锄禾日当午，汗滴禾下土1</span><span class="token comment">//锄禾日当午，汗滴禾下土2</span><span class="token comment">//锄禾日当午，汗滴禾下土3</span><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符的打印流，所以得手动flush</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-缓存读取流"><a href="#2-缓存读取流" class="headerlink" title="2.缓存读取流"></a>2.缓存读取流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//缓存读取流：将字符输入流，转换为带有缓存，可以一次读取一行的缓存字符读取流</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> text <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回读取一行的数据，数据末尾返回null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c.txt中三行只读取一行</span><span class="token comment">//锄禾日当午，汗滴禾下土1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> InputStream </tag>
            
            <tag> OutStream </tag>
            
            <tag> Reader </tag>
            
            <tag> Writer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合总结归纳</title>
      <link href="/2021/10/10/Java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
      <url>/2021/10/10/Java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001259291.png"></p><h1 id="Java集合总结归纳"><a href="#Java集合总结归纳" class="headerlink" title="Java集合总结归纳"></a>Java集合总结归纳</h1><p>​    <strong>集合框架：</strong></p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211010014537419.png" alt="image-20211010014537419" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211010014356487.png" alt="image-20211010014356487" style="zoom:80%;" /> <h2 id="一-Collcetion接口"><a href="#一-Collcetion接口" class="headerlink" title="一.Collcetion接口"></a>一.Collcetion接口</h2><p>●Collection接口是List、Set 和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。</p><p>（1）List：有序，可以存放重复的内容<br>（2）Set：无序，不能存放重复的内容，所以的重复内容靠hashCode()和equals()两个方法区分<br>（3）Queue：队列接口<br>（4）SortedSet：可以对集合中的数据进行排序</p><p>●collection的常见方法<br>1.添加<br>　　boolean add(Object obj); –添加<br>　　boolean addAll(Collection coll) –添加集合<br>2.删除<br>　　boolean remove(Ooject obj); –删除<br>　　boolean remove(Collection coll) –删除集合<br>　　void clear() –移除所有内容<br>3.判断<br>　　boolean contains(object obj); –判断些集合指定的元素，则返回true<br>　　boolean containsAll(Collection coll) –判断些集合指定的合集，则返回true<br>　　boolean isEmpty(): –判断集合中是否有元素。<br>4.获取：<br>　　int size(); –返回集合中的元素数<br>　　Iterator iterator(); –取出元素的方式：迭代器</p><h3 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h3><p>●List:元素有序，可重复的集合–”动态”数组</p><h4 id="①-ArrayList"><a href="#①-ArrayList" class="headerlink" title="①.ArrayList"></a>①.ArrayList</h4><p>​        线程不安全，查询速度快。底层都是基于数组来储存集合元素，封装了一个动态的Object[]数组，是一种顺序存储的线性表。</p><h4 id="②-LinkedList"><a href="#②-LinkedList" class="headerlink" title="②.LinkedList"></a>②.LinkedList</h4><p>​        线程不安全，增删速度快，没有同步方法，是一个链式存储的线性变，本质上是一个双向链表。</p><h3 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h3><p>●Set：元素无序、不可重复的集合–类似高中的”集合”</p><h4 id="①HashSet"><a href="#①HashSet" class="headerlink" title="①HashSet"></a>①HashSet</h4><p>底层数据结构由HashMap的键来实现。不保证集合中元素的顺序，即不能保证迭代的顺序与插入的顺序一致。是线程不安全的。</p><h4 id="②TreeSet"><a href="#②TreeSet" class="headerlink" title="②TreeSet"></a>②TreeSet</h4><p>有序的存放，线程不安全，可以对Set集合中的元素进行排序，由红黑树来实现排序，TreeSet实际上也是SortedSet接口的子类，其在方法中实现了SortedSet的所有方法，并使用comparator()方法进行排序。</p><h4 id="③LinkedHashSet"><a href="#③LinkedHashSet" class="headerlink" title="③LinkedHashSet"></a>③LinkedHashSet</h4><p>底层由链表实现，按照元素插入的顺序进行迭代，即迭代输出的顺序与插入的顺序保持一致</p><h2 id="二-Map接口"><a href="#二-Map接口" class="headerlink" title="二.Map接口"></a>二.Map接口</h2><p>●Map接口:具有映射关系“key-value键值对” 的集合–类似于高中的“函数”y=f(x) (x1,y1) (x2,y2)</p><h3 id="1-HashMap（子类：LinkedHashMap）"><a href="#1-HashMap（子类：LinkedHashMap）" class="headerlink" title="1.HashMap（子类：LinkedHashMap）"></a>1.HashMap（子类：LinkedHashMap）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">HaspMap</span> <span class="token operator">:</span> 作为<span class="token class-name">Map</span>的主要实现类<span class="token punctuation">;</span>线程不安全，效率高<span class="token punctuation">;</span>可以存储<span class="token keyword">null</span>的key和value<span class="token operator">*</span>    <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">LinkedHashMap</span><span class="token operator">:</span>保证在遍历map元素时，可以按照添加顺序实现遍历。<span class="token operator">*</span>                  原因<span class="token operator">:</span>在原有的<span class="token class-name">HaspMap</span>底层结构基础上<span class="token punctuation">,</span>添加了一对指针，指向前一个元素和后一个元素。<span class="token operator">*</span>                  对于频繁的遍历操作，此类执行效率高于<span class="token class-name">HaspMap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​            HashMap的底层:数组+链表(jdk 7以前)<br>​            数组+链表+红黑树(jdk 8以后)</p><h3 id="2-TreeMap"><a href="#2-TreeMap" class="headerlink" title="2.TreeMap"></a>2.TreeMap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">TreeMap</span> <span class="token operator">:</span> 可以按照添加的key<span class="token operator">-</span>value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序<span class="token operator">*</span>             底层使用红黑树<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em><strong>使用定制排序需要注意的点：</strong></em></p><h4 id="①实现Comparable对象的比较"><a href="#①实现Comparable对象的比较" class="headerlink" title="①实现Comparable对象的比较"></a>①实现Comparable对象的比较</h4><p><strong>compareTo方法的真正用途：比较当前自己（x）和下一个元素（y）值，当返回值大于0时，则替换位置。。。。。。。这句话很重要，请细品！！！！！！！！比较方法的实现是可以自定义的，也许是x&gt;y时，返回值大于0，替换位置，这时升序；x&lt;y,返回值也可以大于0，替换位置，这时降序</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211008195230866.png"> </p><p>​    这里的意思是按照成绩升序：因为this.score &gt; o.score 表示传新增加People对象成绩更大的话应该排在原本已有对象的下面！！return 1 表示返回的是this的对象，也就是新增加的的对象！！</p><h4 id="②传入Comparator匿名实现类进行对象比较"><a href="#②传入Comparator匿名实现类进行对象比较" class="headerlink" title="②传入Comparator匿名实现类进行对象比较"></a>②传入Comparator匿名实现类进行对象比较</h4><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211009014304325.png" alt="image-20211009014304325" style="zoom:67%;" /> <p>​    这里o1 &gt; o2 return -1；表示按成绩降序！！</p><h3 id="3-HashTable（子类Properties）"><a href="#3-HashTable（子类Properties）" class="headerlink" title="3.HashTable（子类Properties）"></a>3.HashTable（子类Properties）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Hashtable</span> <span class="token operator">:</span> 作为古老实现类<span class="token punctuation">,</span>线程安全，效率低<span class="token punctuation">;</span>不能存储<span class="token keyword">null</span>的key，value<span class="token operator">*</span>       <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span><span class="token class-name">Properties</span><span class="token operator">:</span>常用来处理配置文件。key<span class="token operator">-</span>value 都是<span class="token class-name">String</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三-Iterator接口和ListIterator接口"><a href="#三-Iterator接口和ListIterator接口" class="headerlink" title="三.Iterator接口和ListIterator接口"></a>三.Iterator接口和ListIterator接口</h2><p>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</p><p>　　♦ boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。<br>　　♦ Object next()：返回集合里下一个元素。<br>　　♦ void remove()：删除集合里上一次next方法返回的元素。</p><p>　　ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：</p><p>　　♦ boolean hasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回 true。<br>　　♦ Object previous()：返回集合里上一个元素。<br>　　♦ void add(Object o)：在指定位置插入一个元素。</p><p>　　以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。</p><h2 id="四-常见面试题"><a href="#四-常见面试题" class="headerlink" title="四.常见面试题"></a>四.常见面试题</h2><h3 id="1-Collection-和-Collections的区别"><a href="#1-Collection-和-Collections的区别" class="headerlink" title="1.Collection 和 Collections的区别"></a>1.Collection 和 Collections的区别</h3><p>答：Collection是集合类的上级接口，继承于他的接口主要有Set 和List.</p><p>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作</p><h3 id="2-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是equals-它们有何区别"><a href="#2-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是equals-它们有何区别" class="headerlink" title="2.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别"></a>2.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别</h3><p>答：Set里的元素是不能重复的，用equals()方法判读两个Set是否相等</p><p>  equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值</p><h3 id="3-List-Set-Map是否继承自Collection接口"><a href="#3-List-Set-Map是否继承自Collection接口" class="headerlink" title="3.List, Set, Map是否继承自Collection接口"></a>3.List, Set, Map是否继承自Collection接口</h3><p>答： List，Set是，Map不是</p><h3 id="4-两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对"><a href="#4-两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对" class="headerlink" title="4. 两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?"></a>4. 两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?</h3><p>答：不对，有相同的hash code</p><h3 id="5-说出ArrayList-Vector-LinkedList的存储性能和特性"><a href="#5-说出ArrayList-Vector-LinkedList的存储性能和特性" class="headerlink" title="5. 说出ArrayList,Vector, LinkedList的存储性能和特性"></a>5. 说出ArrayList,Vector, LinkedList的存储性能和特性</h3><p>答：ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p><h3 id="6-HashMap和Hashtable的区别"><a href="#6-HashMap和Hashtable的区别" class="headerlink" title="6.HashMap和Hashtable的区别"></a>6.HashMap和Hashtable的区别</h3><p>答：</p><p>1.HashMap与Hashtable都实现了Map接口。由于HashMap的非线程安全性，效率上可能高于Hashtable。Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。</p><p>2.HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p><p>3.HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。 </p><p>4.Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。</p><p>5.Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。</p><h3 id="7-ArrayList和Vector的区别"><a href="#7-ArrayList和Vector的区别" class="headerlink" title="7.ArrayList和Vector的区别"></a>7.ArrayList和Vector的区别</h3><p>答：就ArrayList与Vector主要从二方面来说.</p><p>一.同步性:Vector是线程安全的，也就是说是同步的，而ArrayList是线程序不安全的，不是同步的</p><p>二.数据增长:当需要增长时,Vector默认增长为原来一培，而ArrayList却是原来的一半</p><h3 id="8-你所知道的集合类都有哪些？主要方法"><a href="#8-你所知道的集合类都有哪些？主要方法" class="headerlink" title="8.你所知道的集合类都有哪些？主要方法?"></a>8.你所知道的集合类都有哪些？主要方法?</h3><p>答：最常用的集合类是 List 和 Map。 List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。 </p><p>Map 提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作”键”和”值”），其中每个键映射到一个值。</p><h3 id="9-以下代码的运行结果"><a href="#9-以下代码的运行结果" class="headerlink" title="9.以下代码的运行结果?"></a>9.以下代码的运行结果?</h3><table><thead><tr><th><strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) {        Integer[] datas = {1,2,3,4,5};        List<Integer> list = Arrays.<em>asList</em>(datas);        list.add(5);        System.*<strong>out*</strong>.println(list.size());    }</th></tr></thead><tbody><tr><td>运行异常，不允许添加元素,因为asList的返回对象是一个Arrays内部类,并没有实现集合的修改方法。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
            <tag> Collection </tag>
            
            <tag> Map </tag>
            
            <tag> Iterator </tag>
            
            <tag> 集合面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown入门语法</title>
      <link href="/2021/10/10/markdown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/10/markdown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011000448621.png"></p><h1 id="markdown-快速入门语法"><a href="#markdown-快速入门语法" class="headerlink" title="markdown 快速入门语法"></a>markdown 快速入门语法</h1><h2 id="java开发学习路线-https-shimo-im-docs-KY8RHjcgdqwq88kq-read"><a href="#java开发学习路线-https-shimo-im-docs-KY8RHjcgdqwq88kq-read" class="headerlink" title="java开发学习路线 https://shimo.im/docs/KY8RHjcgdqwq88kq/read"></a>java开发学习路线 <a href="https://shimo.im/docs/KY8RHjcgdqwq88kq/read">https://shimo.im/docs/KY8RHjcgdqwq88kq/read</a></h2><h2 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代码块语法:</span>```java    ```shell    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.java代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">```<span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>shell脚本<span class="token operator">*</span><span class="token operator">*</span>```shell<span class="token comment">//linux下spring项目的启动命令</span>#java <span class="token operator">-</span>jar blog start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、标题："><a href="#2、标题：" class="headerlink" title="2、标题："></a>2、标题：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标题语法</span># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加粗</span><span class="token operator">*</span><span class="token operator">*</span>等不到天黑（加粗）<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//代码高亮显示</span><span class="token operator">==</span>代码高亮部分显示<span class="token operator">==</span><span class="token comment">//删除线</span><span class="token operator">~</span><span class="token operator">~</span>被删除的文字<span class="token operator">~</span><span class="token operator">~</span><span class="token comment">//斜体</span><span class="token operator">*</span>斜体内容<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//加粗<br><strong>等不到天黑（加粗）</strong><br>//代码高亮显示<br>==代码高亮部分显示==<br>//删除线<br><del>被删除的文字</del><br>//斜体<br><em>斜体内容</em></p><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用语法</span><span class="token operator">></span>作者<span class="token operator">:</span>lxy<span class="token operator">>></span>作者<span class="token operator">:</span>lxy<span class="token operator">>>></span>作者<span class="token operator">:</span>lxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作者:lxy</p><blockquote><p>作者:lxy</p><blockquote><p>作者:lxy</p></blockquote></blockquote></blockquote><h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">&#x2F;&#x2F;分割线1:---&#x2F;&#x2F;分割线2:***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h3 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入:"></a>6.图片插入:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在线图片 and 本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>图片名字<span class="token punctuation">]</span><span class="token punctuation">(</span>图片路径<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-超链接："><a href="#7-超链接：" class="headerlink" title="7.超链接："></a>7.超链接：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//超链接语法：</span><span class="token punctuation">[</span>我的hexo<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>lxy197120<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://lxy197120.github.io/">我的hexo</a></p><h2 id="8-列表："><a href="#8-列表：" class="headerlink" title="8.列表："></a>8.列表：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无序列表</span><span class="token operator">-</span> 目录<span class="token number">1</span><span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span><span class="token comment">//有序列表</span><span class="token comment">//1+. + 名称</span><span class="token number">1</span> <span class="token punctuation">.</span> 首页<span class="token number">2</span> <span class="token punctuation">.</span> 分类<span class="token number">3</span> <span class="token punctuation">.</span> 标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><p>1 . 首页<br>2 . 分类<br>3 . 标签</p><h2 id="9-表格："><a href="#9-表格：" class="headerlink" title="9.表格："></a>9.表格：</h2><table><thead><tr><th>成绩</th><th>语文</th><th>数学</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常用类库简单说明</title>
      <link href="/2021/10/06/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%B4%E6%98%8E/"/>
      <url>/2021/10/06/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011000831318.png"></p><h1 id="java常用类库："><a href="#java常用类库：" class="headerlink" title="java常用类库："></a>java常用类库：</h1><h2 id="1-java-util-Objects"><a href="#1-java-util-Objects" class="headerlink" title="1.java.util.Objects"></a>1.java.util.Objects</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是空会抛异常，让程序中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-java-lang-Math"><a href="#2-java-lang-Math" class="headerlink" title="2.java.lang.Math"></a>2.java.lang.Math</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单实例</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//200</span><span class="token comment">//四舍五入</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">100.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-100</span><span class="token comment">//返回小于等于参数的最大整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-4.5</span><span class="token comment">//返回大于等于参数的最大整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-3.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-java-math-Arrays"><a href="#3-java-math-Arrays" class="headerlink" title="3.java.math.Arrays"></a>3.java.math.Arrays</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[I@58ceff1 -->地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 6, 7, 5, 4, 3, 9, 2]</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 9]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二分查找返回找到元素下标</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span>arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩容数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-java-math-BigDecimal-–-gt-要运算不产生误差可以使用："><a href="#4-java-math-BigDecimal-–-gt-要运算不产生误差可以使用：" class="headerlink" title="4.java.math.BigDecimal –&gt;要运算不产生误差可以使用："></a>4.java.math.BigDecimal –&gt;要运算不产生误差可以使用：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.30000000000000004 -->java小数运算误差</span><span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b3 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加</span><span class="token class-name">BigDecimal</span> b4 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减</span><span class="token class-name">BigDecimal</span> b5 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘</span><span class="token class-name">BigDecimal</span> b6 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//除</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-0.1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.02</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.5</span><span class="token comment">//可以通过BigDecimal的对象.xxxValue()方法获取对象里的值！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-java-util-Date"><a href="#5-java-util-Date" class="headerlink" title="5.java.util.Date"></a>5.java.util.Date</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取当前时间</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">long</span> time <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往前推一天</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Wed Oct 06 00:33:39 CST 2021</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Oct 05 00:33:39 CST 2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-java-util-DateFormat"><a href="#6-java-util-DateFormat" class="headerlink" title="6.java.util.DateFormat"></a>6.java.util.DateFormat</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//DateFormat是抽象类，得实例化它的子类SimpleDateFormat</span><span class="token comment">/** y : 年* M : 月* d : 日* H : 时* m : 分* s : 秒* */</span><span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//format将data对象装换为字符串yyyy年MM月dd日 HH:mm ss</span><span class="token class-name">SimpleDateFormat</span> format1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> text <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021年10月06日 00:46 50</span><span class="token class-name">String</span> text1 <span class="token operator">=</span> format1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-10-06 00:46 50</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parse:将 yyyy-MM-dd HH:mm ss 日期字符串装换为date对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> format1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-12-12 12:12 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间戳转换为距指定时间的天数：-67</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-java-util-Calendar"><a href="#7-java-util-Calendar" class="headerlink" title="7.java.util.Calendar"></a>7.java.util.Calendar</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Calendar.Year的值是底层Calendar里数组下标</span><span class="token class-name">Calendar</span> cl <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021</span><span class="token keyword">int</span> day <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//279</span>cl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022</span>cl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2032</span><span class="token comment">//getTime:获取日历时间表示的Date对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取修改操作完毕后的Date对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-java-lang-System"><a href="#8-java-lang-System" class="headerlink" title="8.java.lang.System"></a>8.java.lang.System</h2><p>System.gc()、System.exit()…… //看jdk11_API</p><h2 id="9-String"><a href="#9-String" class="headerlink" title="9.String"></a>9.String</h2><p>在进行字符串拼接的时候尽量不用”+“进行连接，会造成内存浪费，（存在永久区里，地址不用也没有删除）</p><p>常用方法看API</p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java常用类库 </tag>
            
            <tag> Arrays </tag>
            
            <tag> Date </tag>
            
            <tag> DateFormat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库开发基础</title>
      <link href="/2021/09/28/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/28/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001535361.png"></p><h1 id="Oracle数据库开发基础"><a href="#Oracle数据库开发基础" class="headerlink" title="Oracle数据库开发基础"></a>Oracle数据库开发基础</h1><h2 id="一-SQL-Structure-Query-Language-，基本语句"><a href="#一-SQL-Structure-Query-Language-，基本语句" class="headerlink" title="一.SQL(Structure Query Language)，基本语句"></a>一.SQL(Structure Query Language)，基本语句</h2><h2 id="1-基本认识："><a href="#1-基本认识：" class="headerlink" title="1.基本认识："></a>1.基本认识：</h2><p>1.DQL(Data Query Language)</p><p>​    select…from…where…</p><p>2.DML(Data Manipulation操作 Language)</p><p>​    insert…    update…    delete…</p><p>3.TPL(Transaction Processing Language)</p><p>​    commit    rollback    savepoint</p><p>4.DCL(Data Control Language)</p><p>​    grant授予    revoke撤销</p><p>5.DDL(Data Definition Language)</p><p>​    create    alter    drop    truncate    rename</p><p>6.CCL(Cursor Control    Language)</p><p>​    cursor游标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--建表操作</span><span class="token keyword">create</span> <span class="token keyword">table</span> info<span class="token punctuation">(</span>id varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_info <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> sc<span class="token punctuation">(</span>id varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    subject varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    score <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">--number(15,2)</span>    <span class="token keyword">constraint</span> uk_sc <span class="token keyword">unique</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_sc_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">references</span> info<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> ck_sc_score <span class="token keyword">check</span><span class="token punctuation">(</span>score <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-删除语句"><a href="#2-删除语句" class="headerlink" title="2.删除语句"></a>2.删除语句</h3><p>drop table xx </p><p>作用：删除内容和定义，释放空间。简单来说就是把整个表去掉.以后要新增数据是不可能的,除非新增一个表。 drop table test,就是把整个表 移除.里面的数据都消失</p><p>truncate table xx</p><p>作用：删除内容、释放空间但不删除定义。与drop不同的是,他只是清空表数据而已,不删除表结构。<strong>没有该删除的日志信息，不能回退！</strong>，在企业里除非备份</p><p> delete table + 表名 //删除所有表中信息</p><p>作用：也是删除整个表的数据,但是过程是痛苦的(系统一行一行地删,效率较truncate低) 或delete table tb where 条件</p><p>删除内容不删除定义，不释放空间。<strong>就算数据都删除了但可以回退</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--删表</span><span class="token comment">--先删除sc，在删info，因为sc唯一主键被外键</span><span class="token keyword">drop</span> <span class="token keyword">table</span> sc<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> info<span class="token punctuation">;</span><span class="token comment">--或者直接无视约束删表！</span><span class="token keyword">drop</span> <span class="token keyword">table</span> sc <span class="token keyword">cascade</span> <span class="token keyword">constraint</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数据类型，约束，数据字典以及对表的操作"><a href="#3-数据类型，约束，数据字典以及对表的操作" class="headerlink" title="3.数据类型，约束，数据字典以及对表的操作"></a>3.数据类型，约束，数据字典以及对表的操作</h3><p>1.数据类型：</p><p>Integer    Number    Date    Varchar2…</p><p>2.约束：</p><p>Not null    Primary key    Foreign key    Unique    Check</p><p>3.描述表</p><p>desc + 表名 //查看表结构，不用加分号，属于命令</p><p>4.Information from Data Dictionary</p><pre class="line-numbers language-none"><code class="language-none">--以user开头普通账户都能查，只能看自己能够看到的表select *from user_tables where table_name &#x3D; &#39;INFO&#39;;select *from user_tables where table_name &#x3D; &#39;SC&#39;;select *from user_tab_columns where table_name &#x3D; &#39;INFO&#39;--注:若以dba_tables开头能查所有用户的表，因为是数据库管理员！！!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210928003601195.png" alt="image-20210928003601195"> </p><p>5.新增列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">add</span> grade <span class="token keyword">integer</span> <span class="token keyword">default</span> <span class="token number">2020</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">modify</span> subject varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">modify</span> grade <span class="token keyword">default</span> <span class="token number">2021</span><span class="token punctuation">;</span><span class="token comment">--已经在表的默认2020不变，新加默认2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.删除列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">drop</span> <span class="token keyword">column</span> birthday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">drop</span> <span class="token keyword">constraint</span> fk_sc_id<span class="token punctuation">;</span><span class="token comment">--删除sc表外键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.新增约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">modify</span> id <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token comment">--添加非空约束用modify，原来是可以为空修改为非空</span><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_sc_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">references</span> info<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> user_constraints <span class="token keyword">where</span> table_name <span class="token operator">=</span> <span class="token string">'SC'</span> <span class="token comment">--查看SC表所有约束(以当前用户查看)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.给表或列些注释：desc + 表名 可以看到Comments注释！！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> info <span class="token operator">is</span> <span class="token string">'Student Information'</span><span class="token punctuation">;</span><span class="token comment">//表名的注释</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token string">'Student ID'</span><span class="token punctuation">;</span><span class="token comment">//给info表里的id这个列加注释</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>name <span class="token operator">is</span> <span class="token string">'Student Name'</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>grade <span class="token operator">is</span> <span class="token string">'Student Grade'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE入门必备知识-Servlet篇</title>
      <link href="/2021/09/25/JavaEE%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86-Servlet%E7%AF%87/"/>
      <url>/2021/09/25/JavaEE%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86-Servlet%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001024371.png"></p><h2 id="1-Servlet-工作流程以及实现"><a href="#1-Servlet-工作流程以及实现" class="headerlink" title="1.Servlet 工作流程以及实现"></a>1.Servlet 工作流程以及实现</h2><h3 id="1-1：主要内容"><a href="#1-1：主要内容" class="headerlink" title="1.1：主要内容"></a>1.1：主要内容</h3><ul><li>1.创建普通java类</li><li>2.满足Servlet规范（继承HTTPServlet类）</li><li>3.重写service方法（当请求Servlet类时，会自动调用service方法）</li><li>4.设置Servlet对外访问路径<br> 如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925163435755.png"></p><p>//其中参数代表，localhost:8080/项目名/value可以访问到service（）</p><h3 id="1-2：实现流程"><a href="#1-2：实现流程" class="headerlink" title="1.2：实现流程"></a>1.2：实现流程</h3><p>然后启动Tomcat，idea控制台会显示 Hello！！！，因为接收请求成功，执行service（）方法，然后向浏览器响应66666!</p><p>谷歌浏览器，鼠标右击打开检查，打开Network，点击viewsource如下：查看请求头和响应头！！</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210922215455802.png"> </p><p>通过请求头获知浏览器访问的哪个主机</p><p>再通过请求行获取访问的是哪一个web应用</p><p>再通过请求行中的请求路径获知访问的是哪一个资源</p><p>通过获取资源路径在配置中匹配到真实路径</p><p>服务器会创建servlet对象，（如果是第一次访问，创建servlet实例，并调用init方法进行初始化操作）</p><p>调用service（request，response）方法来处理请求和响应的操作<br>调用service完毕后会返回服务器，由服务器讲response缓冲区的数据取出，以http响应的格式发送给浏览器</p><h3 id="1-3：最终流程总结"><a href="#1-3：最终流程总结" class="headerlink" title="1.3：最终流程总结"></a>1.3：最终流程总结</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925163212830.png"></p><h2 id="2-HttpServletRequest对象-请求"><a href="#2-HttpServletRequest对象-请求" class="headerlink" title="2.HttpServletRequest对象(请求)"></a>2.HttpServletRequest对象(请求)</h2><p>​    HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，通过这个对象提供的方法，可以获得客户端请求的所有信息。</p><h3 id="2-1-接收请求"><a href="#2-1-接收请求" class="headerlink" title="2.1.接收请求"></a>2.1.接收请求</h3><h4 id="2-1-1-常用方法"><a href="#2-1-1-常用方法" class="headerlink" title="2.1.1.常用方法"></a>2.1.1.常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1.常用方法*   1.获取请求方式（get/post等）*   2.获取请求路径（从http开始到？结束）*   3.获取请求部分路径（从项目路径开始到？结束）*   4.获取请求的参数字符串（从？开始到最后）*   5.获取请求协议版本*   6.获取项目的访问路径（站点名，例ser04）//        System.out.println(req.getMethod());//        System.out.println(req.getRequestURL());//        System.out.println(req.getRequestURI());//        System.out.println(req.getQueryString());//        System.out.println(req.getProtocol());//        System.out.println(req.getContextPath());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925163053662.png"></p><h4 id="2-1-2-获取请求参数"><a href="#2-1-2-获取请求参数" class="headerlink" title="2.1.2.获取请求参数"></a>2.1.2.获取请求参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>   <span class="token number">1.</span>获取指定参数名的参数值<span class="token operator">*</span>       request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token operator">*</span>       注：<span class="token operator">*</span>           <span class="token number">1.</span>表单提交：<span class="token operator">*</span>               参数名表示的是表单元素的name属性值<span class="token operator">*</span>           <span class="token number">2.</span>地址栏输入：<span class="token operator">*</span>               参数名表示的是：<span class="token string">"?键=值&amp;键=值"</span>的键<span class="token operator">*</span>   <span class="token number">2.</span>获取指定参数名的所有参数值<span class="token operator">*</span>       request<span class="token punctuation">.</span><span class="token function">getParameterValue</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token comment">//获取指定参数</span><span class="token class-name">String</span> uname <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> upwd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userPwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token operator">+</span> upwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取多个参数</span><span class="token comment">//System.out.println(req.getParameterValues("hobby").length);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210923105454863.png"></p><h3 id="2-2-请求乱码问题"><a href="#2-2-请求乱码问题" class="headerlink" title="2.2.请求乱码问题"></a>2.2.请求乱码问题</h3><h4 id="2-2-1-乱码原因"><a href="#2-2-1-乱码原因" class="headerlink" title="2.2.1.乱码原因"></a>2.2.1.乱码原因</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">request有默认的解析编码，ISO<span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>，这种编码不支持中文，传递中文参数必定乱码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-解决方案"><a href="#2-2-2-解决方案" class="headerlink" title="2.2.2.解决方案"></a>2.2.2.解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">1.</span>只针对POST请求的乱码问题（处理所有参数）<span class="token operator">*</span>          request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span>      <span class="token number">2.</span>任意请求方式都有效（一次处理一个参数）<span class="token operator">*</span>          <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>          目前<span class="token class-name">Tomcat8</span>及以上版本<span class="token class-name">Get</span>请求不会出现乱码，所以只要处理<span class="token class-name">Post</span>请求参数乱码即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-请求转发"><a href="#2-3-请求转发" class="headerlink" title="2.3.请求转发"></a>2.3.请求转发</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>   一种跳转方式<span class="token operator">*</span>   <span class="token number">1.</span>服务端跳转<span class="token operator">*</span>   <span class="token number">2.</span>地址栏不发生改变<span class="token operator">*</span>   <span class="token number">3.</span>只有一次请求<span class="token operator">*</span>   <span class="token number">4.</span>数据可以共享<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-request作用域"><a href="#2-4-request作用域" class="headerlink" title="2.4.request作用域"></a>2.4.request作用域</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>     只在一次请求中有效，只在请求转发跳转有效      req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"姓名或者密码不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置作用域，（任意类型的数据）</span>      req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取作用域的值</span>  req<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token comment">//移除指定作用域的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-HttpServletResponse对象"><a href="#3-HttpServletResponse对象" class="headerlink" title="3.HttpServletResponse对象"></a>3.HttpServletResponse对象</h2><p>　　HttpServletResponse对象代表服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。查看HttpServletResponse的API，可以看到这些相关的方法。</p><h3 id="3-1-响应数据"><a href="#3-1-响应数据" class="headerlink" title="3.1.响应数据"></a>3.1.响应数据</h3><p>​        接收到客户端请求后，可以通过HttPServletResponse对象直接进行响应，响应时需要获取输出流</p><p>​        有两种形式：</p><p>​                字符输出流 getWriter()</p><p>​                字节输出流getOutputStream()</p><p>​                注：两种流不能同时使用！</p><pre class="line-numbers language-none"><code class="language-none">        &#x2F;&#x2F;得到字符输出流&#x2F;&#x2F;        PrintWriter writer &#x3D; resp.getWriter();&#x2F;&#x2F;        writer.write(&quot;Hello!&quot;);        &#x2F;&#x2F;得到字节输出流        ServletOutputStream outputStream &#x3D; resp.getOutputStream();        outputStream.write(&quot;你好世界&quot;.getBytes());    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-响应乱码问题"><a href="#3-2-响应乱码问题" class="headerlink" title="3.2.响应乱码问题"></a>3.2.响应乱码问题</h3><p>​        对于getWriter()获取到的字符流，响应中文必定出现字符乱码问题，由于服务器端在进行编码时刻<br>​    会默认使用ISO-8859-1，该编码方式不支持中文<br>​        要解决这种乱码只能在服务器端告知服务器使用一种能支持中文编码格式，比如我们常用的”UTF-8”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        此时只完成了一半的工作，要保证数据显示。还还需要指定客户端解码方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset = UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        保证发送端和接收端的编码一致</p><p>或者使用如下代码替代上诉操作，同时指定服务器和客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset = UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-重定向"><a href="#3-3-重定向" class="headerlink" title="3.3.重定向"></a>3.3.重定向</h3><pre class="line-numbers language-none"><code class="language-none">* 3.重定向*      一种跳转方式*      由服务端指导客户端跳转*      1.客户端跳转*      2.地址栏会发生改变*      3.存在两次请求*      4.数据不能共享** 请求转发只能跳转到当前站点下的资源，不可以跨域，重定向可以跳转到任意资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-重定向和转发的区别"><a href="#3-4-重定向和转发的区别" class="headerlink" title="3.4.重定向和转发的区别"></a>3.4.重定向和转发的区别</h3><p>​    请求转发:一种跳转方式</p><p>1.服务端跳转</p><p>2.地址栏不发生改变</p><p>3.存在一次请求</p><p>4.数据可以共享</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">后面<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>表示请求转发但前站点其他资源时，把对象一起传过去req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-Cookie对象"><a href="#4-Cookie对象" class="headerlink" title="4.Cookie对象"></a>4.Cookie对象</h2><p>​        Cookie是浏览器提供的一种技术，通过服务器的程序将一些只需保存在客户端，或者在客户端进行处理大数据，放在本地计算机上，不需要通过网络传输，因而提高网页处理效率，并且能够减少服务器的负载，但是由于Cookie是服务端保存在客户端的信息，所以其安全性也是很差的。例如常用的记住密码则可以通过Cookie来实现</p><p>​        有一个专门操作Cookie的类javax.servlet.http.Cookie ，随着服务器端的响应发送给客户端，保存在浏览器，当下一再访问服务器时把Cookie再带回服务器</p><p>​        Cookie的格式： 键值对用“=”连接，多个键值对用“；”隔开</p><h3 id="4-1-cookie的创建与发送"><a href="#4-1-cookie的创建与发送" class="headerlink" title="4.1.cookie的创建与发送"></a>4.1.cookie的创建与发送</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Cookie对象</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送Cookie（将cookie对象响应发送给客户端）</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-cookie的获取"><a href="#4-2-cookie的获取" class="headerlink" title="4.2.cookie的获取"></a>4.2.cookie的获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Cookie</span>的获取<span class="token operator">*</span>      获取所有<span class="token class-name">Cookie</span>对象，返回<span class="token class-name">Cookie</span>数组<span class="token operator">*</span>      request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有Cookie对象</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断后遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取指定name的cookie对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"值为："</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-cookie设置到期时间"><a href="#4-3-cookie设置到期时间" class="headerlink" title="4.3.cookie设置到期时间"></a>4.3.cookie设置到期时间</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Cookie</span>失效时间<span class="token operator">*</span>      cookie默认是关闭浏览器失效<span class="token punctuation">(</span>与服务器是否关闭无关<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>      通过maxAge设置cookie失效时间<span class="token operator">*</span>      <span class="token number">1.</span>正整数<span class="token operator">*</span>          表示cookie存活指定秒数<span class="token operator">*</span>      <span class="token number">2.</span>负整数<span class="token operator">*</span>          表示cookie只在浏览器中存活，浏览器关闭即失效，默认值：<span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>      <span class="token number">3.</span>零<span class="token operator">*</span>          表示删除cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Cookie对象</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置cookie存活秒数</span><span class="token comment">//设置7天失效</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送Cookie（将cookie对象响应发送给客户端）</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname1"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示关闭浏览器cookie失效</span>cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname2"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//零：表示立即删除</span>cookie2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除已有的cookie对象</span><span class="token class-name">Cookie</span> cook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cook<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cook<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-cookie的注意点"><a href="#4-4-cookie的注意点" class="headerlink" title="4.4.cookie的注意点"></a>4.4.cookie的注意点</h3><ul><li><p>Cookie保存在当前浏览器中</p><p>​    在一般站点常常有记住用户名这样一个操作，该操作只是将该信息保存在本机上，换电脑以后这些信息就无效了。而且cookie还不能跨浏览器。</p></li><li><p>Cookie存在中文问题</p><p>​    Cookie中不能出现中文，如果有中文则通过URLEncoder.encode()来进行编码，获取时通过URLDecoder.decode()来进行解码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Cookie中不能出现中文，如果有中文则通过URLEncoder.encode()来进行编码</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"，名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"，测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cookie cookie = new Cookie("名字","测试");//这个会报错，name不能是中文</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个不编码会报错</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925163627061.png">只编码不解码，在输出端会出现这个问题!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用这个解码响应浏览器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210923151228648.png">解码后的样子！</p></li><li><p>同名Cookie问题</p></li></ul><p>  ​    在cookie的domian和path相同时，如果服务器端发送重复的Cookie那么会覆盖原有的Cookie</p><p>  ​    但是不同浏览器可以重名Cookie</p><ul><li><p>浏览器存放Cookie数量</p><p>​    不同浏览器对Cookie也有限定，Cookie的存储也是有上限的。Cookie是存储在客户端（浏览器）的，而且一般是由服务器端创建和设定的。后期结合Session来实现回话跟踪。</p></li></ul><h3 id="4-5-cookie的路径"><a href="#4-5-cookie的路径" class="headerlink" title="4.5.cookie的路径"></a>4.5.cookie的路径</h3><p>​        Cookie的setPath()可以设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器加载某些cookie。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token number">1.</span>在当前项目下的资可以获取<span class="token operator">*</span> <span class="token number">2.</span>在当前服务器下的资源可以获取<span class="token operator">-></span>设置路径为<span class="token string">"/"</span><span class="token operator">*</span> <span class="token number">3.</span>在指定项目的资源下可以访问<span class="token operator">*</span> <span class="token number">4.</span>在指定路径的资源可以访问        <span class="token comment">//1.在当前项目的资源都可以获取，包括前端的.jsp文件也能拿到cookie</span>        <span class="token class-name">Cookie</span> cookie01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie01<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.在当前服务器下的资源可以获取->设置路径为"/"</span>        <span class="token class-name">Cookie</span> cookie02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie02<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.在指定项目下的资源可以访问</span>        <span class="token class-name">Cookie</span> cookie03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a3"</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie03<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie03<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在指定路径的资源可以访问</span>        <span class="token class-name">Cookie</span> cookie04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a4"</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie04<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb/cook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie04<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210923153610785.png">一个项目下可以设置多个资源路径</p><h2 id="5-HttpSession对象"><a href="#5-HttpSession对象" class="headerlink" title="5.HttpSession对象"></a>5.HttpSession对象</h2><p>​        HTTPSession是Java平台对session机制的实现规范，因为它仅仅是个接口，具体到每个web应用服务器的提供商，除了对规范支持之外，仍然会有一些规范里没有规定的细微差异。<br>HTTPSession对象将在用户第1次访问服务器时由容器创建(只有访问JSP、Servlet等程序时才会创建，只访问HTML、image等静态资源并不会创建)，当用户调用其失效方法(invalidate()方法)或超过其最大不活动时间时会失效。在会话有效期间，用户与服务器之间的多次请求都属于同一个会话。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/weixin_49092628/article/details/109287535">https://blog.csdn.net/weixin_49092628/article/details/109287535</a></p><h3 id="5-1-标识符JSESSIONID"><a href="#5-1-标识符JSESSIONID" class="headerlink" title="5.1.标识符JSESSIONID"></a>5.1.标识符JSESSIONID</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">2.</span>JSESSIONID标识符<span class="token operator">*</span>          <span class="token number">2.1</span>当请求达到服务器时，如果使用了session，服务器回去获取一个JSESSIONID的cookie对象<span class="token operator">*</span>          <span class="token number">2.2</span>如果cookie对象不存在，则新建立session对象，并设置sessionId，将sessionId回传给客户端中，设置对应的cookie。<span class="token operator">*</span>             如果cookie对象存在，服务器会比较客户端传递的sessionId是否与服务端一致<span class="token operator">*</span>                  如果不一致，新建session对象，并设置sessionId，将sessionId回传给客户端中，重新设置对应的cookie<span class="token operator">*</span>                  如果一致，则获取到当前session对象<span class="token operator">*</span>             <span class="token operator">&lt;</span><span class="token class-name">Session</span>底层是依赖cookie的，默认关闭浏览器失效<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取session对象HttpSession session &#x3D; req.getSession();&#x2F;&#x2F;常用方法System.out.println(&quot;SessionId:&quot; + session.getId());System.out.println(&quot;会话创建时间：&quot; + session.getCreationTime());System.out.println(&quot;最后一次访问时间&quot; + session.getLastAccessedTime());System.out.println(&quot;是否是新的对象&quot; + session.isNew());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-session域对象"><a href="#5-2-session域对象" class="headerlink" title="5.2.session域对象"></a>5.2.session域对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">3.</span>session作用域<span class="token operator">*</span>          再一次会话有效，可以有多次请求和响应，在会话中数据共享<span class="token operator">*</span>          <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>          request作用域<span class="token operator">*</span>              一次请求中有效，在请求转发中有效，在重定向失效<span class="token operator">*</span>          session作用域<span class="token operator">*</span>               一次回话中有效，无论请求转发还是重定向都有效，会话销毁则失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 作用域* */</span><span class="token comment">//设置request作用域</span>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置session作用域</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求转发(一次请求)</span><span class="token comment">//req.getRequestDispatcher("se02").forward(req,resp);</span><span class="token comment">//重定向(两次请求->request不共享)</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"se02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211014002144048.png"></p><h3 id="5-3-session对象的销毁"><a href="#5-3-session对象的销毁" class="headerlink" title="5.3.session对象的销毁"></a>5.3.session对象的销毁</h3><p>​        当客户第一次请求servlet并且操作session时，session对象生成，Tomcat中session默认存活时间式神30min，即你不操作界面的时间，一旦有操作，session会重新计时</p><p>​        那么session的默认时间在哪里可以更改呢？</p><p>​        -&gt;在Tomcat中的conf目录下的web.xml文件中可以进行修改，不建议修改</p><!-- session默认最大不活动时间，单位：分钟 -->   <session-config>        <session-timeout>30</session-timeout>    </session-config><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">4.</span>session的销毁<span class="token operator">*</span>          <span class="token number">1.</span>关闭服务器<span class="token operator">*</span>          <span class="token number">2.</span>关闭浏览器<span class="token operator">*</span>              session底层依赖cookie，cookie默认只在浏览器存活，浏览器关闭则失效<span class="token operator">*</span>          <span class="token number">3.</span>默认最大不活动时间<span class="token operator">*</span>              服务器设置了session的最大不活动时间，<span class="token class-name">Tomcat</span>服务器设置的是<span class="token number">30</span>分钟。在指定时间<span class="token operator">*</span>              内不操作，session失效<span class="token operator">*</span>          <span class="token number">4.</span>手动设置失效时间<span class="token punctuation">(</span>单位：秒<span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token number">5.</span>手动销毁<span class="token operator">*</span>              session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//最大不活动时间</span><span class="token keyword">int</span> sec <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session的最大不活动时间："</span> <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置最大不活动时间</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20秒失效</span><span class="token comment">//手动销毁</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924112816982.png"> </p><p><strong>重定向后session不发生改变，SessionId保持一致</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924113030929.png"> </p><p><strong>20秒后session失效，重定向到新页面创建新的SessionId，对比前后Session02的SessionId即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924113227570.png"> </p><p><strong>设置session失效，所以重定向后两个页面的sessionId不一致</strong></p><h2 id="6-ServletContext对象"><a href="#6-ServletContext对象" class="headerlink" title="6.ServletContext对象"></a>6.ServletContext对象</h2><p>​        每一个web应用有且只有一个ServletContext对象，又称Application对象，从名称中可以得知，该对象是与应用程序相关的。在WEB容器启动的时候，会为每一个WEB应用程序创建一个对应的ServletContext对象。</p><p>​        该对象有两大作用，第一：作为域对象用来共享数据，此时数据在整个应用程序中共享；第二：该对象保存了当前应用程序相关信息，例如可以通过getServerInfo()获取当前服务器信息，getRealPath(String path)获取资源的真实路径等。</p><h3 id="6-1-ServletContext对象的获取"><a href="#6-1-ServletContext对象的获取" class="headerlink" title="6.1.ServletContext对象的获取"></a>6.1.ServletContext对象的获取</h3><p>​        获取ServletContext对象的途径有很多。比如：</p><ul><li>通过request 对象获取</li></ul><ul><li>通过session 对象获取</li></ul><ul><li>通过servletConfig 对象获取，在Servlet标准中提供了ServletConfig方法</li></ul><ul><li>直接获取，Servlet类中提供了直接获取ServletContext对象的方法</li></ul><p><strong>常用方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 常用方法* */</span><span class="token comment">//获取项目的真实路径</span><span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取项目的真实路径"</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前服务器的版本信息</span><span class="token class-name">String</span> serverInfo <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前服务器的版本信息"</span> <span class="token operator">+</span> serverInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924135524146.png"></p><h3 id="6-2-ServletContext域对象"><a href="#6-2-ServletContext域对象" class="headerlink" title="6.2.ServletContext域对象"></a>6.2.ServletContext域对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 作用域*      在这个应用程序中有效，只要服务器关闭就失效*       getAttribute*       setAttribute*       removeAttribute* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-文件上传和下载"><a href="#7-文件上传和下载" class="headerlink" title="7.文件上传和下载"></a>7.文件上传和下载</h2><p>​        在上网的时候我们常常会遇到文件上传的问题，例如上传头像，上传资料；当然除了上传，下载的情况也很多，接下来来看看我们Servlet中是怎么实现文件的上传和下载！</p><h3 id="7-1-文件上传"><a href="#7-1-文件上传" class="headerlink" title="7.1.文件上传"></a>7.1.文件上传</h3><h4 id="7-1-1-前台页面"><a href="#7-1-1-前台页面" class="headerlink" title="7.1.1.前台页面"></a>7.1.1.前台页面</h4><p>​        在做文件上传的时候，会有一个上传文件的页面，首先我们需要一个表单，并且表单的请求方式为POST；其次我们的form表单的enctype必须设为”multipart/form-data”,即 <strong>enctype=”multipart/form-data”</strong>,意思是设置表单的类型为文件上传表单。默认情况下这个表单类型是”application/x-www-form-urlencoded”,不能用于文件上传。只有使用了multipart/form-data才可以完整的传输数据！</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--文件上传表单1.表单提交类型 method = "post"2.表单类型 enctype="multipart/form-data" 二进制表单3.表单元素类型 文件域设置name属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-后台实现"><a href="#7-1-2-后台实现" class="headerlink" title="7.1.2.后台实现"></a>7.1.2.后台实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Lxy * @create 2021-09-24 14:33 * * 如果文件上传类型为二进制表单，则需要添加@MultipartConfig注解，否则所有数据无法获取！！！ */</span><span class="token annotation punctuation">@MultipartConfig</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/uploadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> uploadServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置请求的编码格式</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收参数（普通参数）</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"uname:"</span> <span class="token operator">+</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得part对象</span>        <span class="token class-name">Part</span> part <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">"myfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到上传文件的名称</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到项目存放的真实路径(得到文件需要存放的路径)</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件上传操作</span>        part<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924145634704.png" alt="image-20210924145634704"  /> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924145653564.png"> </p><h3 id="7-2-文件下载"><a href="#7-2-文件下载" class="headerlink" title="7.2.文件下载"></a>7.2.文件下载</h3><p>​        文件下载，即将服务器上的资源下载（拷贝）到本地，我们可以通过两种方式下载。第一只是通过超链接本身的特性来下载；第二种是通过代码下载。</p><h4 id="7-2-1-超链接下载"><a href="#7-2-1-超链接下载" class="headerlink" title="7.2.1.超链接下载"></a>7.2.1.超链接下载</h4><p>​        当我们在Html或者Jsp页面中使用a标签时，原意是希望能够进行跳转，但当超链接遇到浏览器不识别的资源时也会自动下载；当遇到浏览器能够直接显示的资源，浏览器会默认显示出来，不如txt，png，jpg等。当然我们也可以通过<strong>download属性</strong>规定浏览器进行下载。但有些浏览器不支持。</p><p>​        <strong>默认下载：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h2&gt;超链接下载&lt;&#x2F;h2&gt;&lt;h4&gt;浏览器可以识别的资源&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;test.html&quot;&gt;Html页面&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;test&quot;&gt;Txt文件&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;bg.png&quot;&gt;图片&lt;&#x2F;a&gt;&lt;h4&gt;浏览器无法识别的资源&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;bg1.7z&quot;&gt;压缩图片&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924151944322.png" alt="image-20210924151944322" style="zoom:50%;"/> <p>​        <strong>指定download属性下载：</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h4&gt;download属性&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;test.html&quot; download&gt;Html文件&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;test.html&quot; download&#x3D;&quot;demo.txt&quot;&gt;下载(.Html转换.Txt文件)&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924152501024.png" alt="image-20210924152501024" style="zoom:80%;" /> 点击Html文件</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924152550593.png" alt="image-20210924152550593" style="zoom: 80%;" /> 点击下载链接</p><h4 id="7-2-2-后台实现下载"><a href="#7-2-2-后台实现下载" class="headerlink" title="7.2.2.后台实现下载"></a>7.2.2.后台实现下载</h4><p>​        <strong>实现步骤</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;form action&#x3D;&quot;downloadServlet&quot;&gt;    文件名:&lt;input type&#x3D;&quot;text&quot;name&#x3D;&quot;filename&quot;&gt;    &lt;button type&#x3D;&quot;submit&quot;&gt;下载&lt;&#x2F;button&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/downloadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> downloadServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置请求的编码格式</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收要下载的文件名</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件名是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要下载的文件名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//得到文件存放的路径</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过路径得到file对象</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件是否存在且是一个标准文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//设置响应类型(浏览器无法使用某种方式或激活某个程序来处理的类型)->下载弹出的确定保存提示框。</span>            resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/x-msdownload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置头信息</span>            resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到文件的输入流</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到字节输出流</span>            <span class="token class-name">ServletOutputStream</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要下载的文件不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925145311713.png"> 后台下载会在服务器内部找到对应文件，找得到则跳出下载提示框！！</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210925145144128.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Servlet </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上传博客</title>
      <link href="/2021/09/25/hello-world/"/>
      <url>/2021/09/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001916654.png"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
